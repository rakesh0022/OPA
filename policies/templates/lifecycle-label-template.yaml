# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: templates.gatekeeper.sh/v1alpha1
kind: ConstraintTemplate
metadata:
  name: gcp-project-lifecycle-labeling
spec:
  crd:
    spec:
      names:
        kind: GCPEnforceLifecycleLabelConstraintV1
      validation:
        openAPIV3Schema:
          required: ["mandatory_labels"]
          properties: 
           mandatory_labels:
             description: |
              "List of mandatory label objects to check for on all supported resources.
              Label objects should be as follow:
              label_key: label_value_regex_to_match
              Each missing label will result in a violation for scanned resources.
              Each mismatching label will result in a violation for scanned resources."
             type: array
             items: 
               type : object   
           resource_types_to_scan:    
              description: |        
               "Optional parameter: list of resource types to scan for labels.
                 Any resource that is not of these types will not raise any violation.

                 If not passed, all tested resource types will be scanned for violations:

               - cloudresourcemanager.googleapis.com/Project
               - compute.googleapis.com/Instance

               If a resource type passed is not part of this list, the labels will be
               looked for in the data.labels key of the resource object.
               "
              type: array
              items:
               type: string
  targets:
    validation.gcp.forsetisecurity.org:
      rego: | #INLINE("validator/project-lifecyclelabel.rego")
            # Copyright 2019 Google LLC
            #
            # Licensed under the Apache License, Version 2.0 (the "License");
            # you may not use this file except in compliance with the License.
            # You may obtain a copy of the License at
            #
            #			http://www.apache.org/licenses/LICENSE-2.0
            #
            # Unless required by applicable law or agreed to in writing, software
            # distributed under the License is distributed on an "AS IS" BASIS,
            # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            # See the License for the specific language governing permissions and
            # limitations under the License.
            # 
            
            package templates.gcp.GCPEnforceLifecycleLabelConstraintV1
            
            #import future.keywords.in
            default policyvalidation = false
            
            import data.validator.gcp.lib as lib
            
            deny[{
            	"msg": message,
            	"details": metadata,
            }] {
            	constraint := input.constraint
            	lib.get_constraint_params(constraint, params)
            	asset := input.asset
            
            	# test if we have a valid resource
            	resource := asset.resource.data
            
            	mandatory_label := params.mandatory_labels[_]
            	label_value_pattern := mandatory_label[label_key]
            
            	default_resource_types := {
            		"cloudresourcemanager.googleapis.com/Project",
            		"compute.googleapis.com/Instance",
            	}
            
            	resource_types_to_scan := lib.get_default(params, "resource_types_to_scan", default_resource_types)
            
            	# test if resource needs to be scanned
            	resource_types_to_scan[_] == asset.asset_type
            
            	not label_is_valid(label_key, label_value_pattern, asset)
            	message := sprintf("%v's lifecycle '%v' is in violation.", [asset.name, asset.resource.data.labels.lifecycle])
            	metadata := {"resource": asset.name, "label_in_violation": asset.resource.data.labels.lifecycle}
            }
            
            # check if label exists and if its value matches the pattern passed as a parameter for all resources to scan
            
            label_is_valid(label_key, label_value_pattern, asset) {
            	resource_labels := {"dev" : "d", "qa" : "q", "cert-cde" : "c", "prod-cde": "p", "svcs": "p", "cert-ncde": "s", "prod-ncde": "g"}
            	projName = asset.resource.data.name
            	environment_character = substring(projName, 11, 1)
            	lifecycle = asset.resource.data.labels.lifecycle
            
             #policyvalidation := resource_labels["lifecycle"]
              environment_character == resource_labels[lifecycle]
              #policyvalidation == environment_character
            }
            
            #ENDINLINE